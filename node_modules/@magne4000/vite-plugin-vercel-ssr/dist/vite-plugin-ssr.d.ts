import { UserConfig, ResolvedConfig, Plugin } from 'vite';
import { ViteVercelPrerenderFn, ViteVercelApiEntry } from 'vite-plugin-vercel';

declare function assert(condition: unknown, errorMessage: string): asserts condition;
declare function getRoot(config: UserConfig | ResolvedConfig): string;
declare function getOutput(config: ResolvedConfig, suffix?: 'functions' | `functions/${string}.func` | 'static'): string;
declare function getOutDir(config: ResolvedConfig, force?: 'client' | 'server'): string;
declare const prerender: ViteVercelPrerenderFn;
declare function getSsrEndpoint(userConfig: UserConfig, source?: string): Promise<ViteVercelApiEntry>;
interface Options {
    /**
     * A pattern that matches each incoming pathname that should be caught by vite-plugin-ssr.
     * As this rule is inserted last, a simple catch-all rule excluding /api/* should be enough.
     * Defaults to `(?!/api).*`
     * @see {@link https://vercel.com/docs/project-configuration#project-configuration/rewrites}
     */
    source?: string;
}
declare function vitePluginSsrVercelPlugin(options?: Options): Plugin;
declare function vitePluginVercelVpsIsrPlugin(): Plugin;
declare function vitePluginVercelVpsCopyStaticAssetsPlugins(): Plugin;
declare function allPlugins(options?: Options): Plugin[];

export { Options, assert, allPlugins as default, getOutDir, getOutput, getRoot, getSsrEndpoint, prerender, vitePluginSsrVercelPlugin, vitePluginVercelVpsCopyStaticAssetsPlugins, vitePluginVercelVpsIsrPlugin };
