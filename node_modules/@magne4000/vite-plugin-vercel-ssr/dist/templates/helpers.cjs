"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// templates/helpers.ts
var helpers_exports = {};
__export(helpers_exports, {
  getDefaultEmptyResponseHandler: () => getDefaultEmptyResponseHandler,
  getDefaultPageContextInit: () => getDefaultPageContextInit,
  getDefaultResponseHandler: () => getDefaultResponseHandler
});
module.exports = __toCommonJS(helpers_exports);
var import_querystring = require("querystring");
function getDefaultPageContextInit(request) {
  const query = request.query ?? {};
  const matches = (
    // FIXME x-now-route-matches is not definitive https://github.com/orgs/vercel/discussions/577#discussioncomment-2769478
    typeof request.headers["x-now-route-matches"] === "string" ? (0, import_querystring.parse)(request.headers["x-now-route-matches"]) : null
  );
  const url = typeof query.__original_path === "string" ? query.__original_path : matches && typeof matches["1"] === "string" ? matches["1"] : request.url;
  return {
    url,
    body: request.body,
    cookies: request.cookies
  };
}
function getDefaultEmptyResponseHandler(response) {
  response.statusCode = 200;
  response.setHeader("content-type", "text/html; charset=UTF-8");
  return response.end("");
}
function getDefaultResponseHandler(response, httpResponse) {
  const { statusCode, body, contentType } = httpResponse;
  response.statusCode = statusCode;
  response.setHeader("content-type", contentType);
  return response.end(body);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getDefaultEmptyResponseHandler,
  getDefaultPageContextInit,
  getDefaultResponseHandler
});
